print(__doc__)

import time

import matplotlib.pyplot as plt
import numpy as np


from sklearn import datasets
from sklearn.cluster import MiniBatchKMeans
from sklearn.feature_extraction.image import extract_patches_2d
from create_Dataset2 import CustomDataSet
from scipy import misc

#faces = datasets.fetch_olivetti_faces()
from create_Dataset2 import  CustomDataSet
dic = dict(data=[], target=[])

for i in range(5000):
    dat = dic['data']
    img = misc.imread("/Users/nickdugal/desktop/pics/oscilating/wave{}.jpeg".format(i)) / 255
    w, h, d = original_shape = tuple(img.shape)
    assert d == 4, print(img.shape)
    image_array = np.reshape(img, (w * h, d))
    dat.append(image_array)
    dic['data'] = dat
    tar = dic['target']
    tar.append(0)
    dic['target'] = tar

ds = CustomDataSet()
ds.data = dic['data']
ds.target = dic['target']
X = np.asarray(ds.data)


print('Learning the dictionary... ')
rng = np.random.RandomState(0)
kmeans = MiniBatchKMeans(n_clusters=81, random_state=rng, verbose=True)
patch_size = (20, 20)

buffer = []
index = 1
t0 = time.time()

# The online learning part: cycle over the whole dataset 6 times
index = 0
for _ in range(6):
    for img in ds.data:
        data = extract_patches_2d(img, patch_size, max_patches=50,
                                  random_state=rng)
        data = np.reshape(data, (len(data), -1))
        buffer.append(data)
        index += 1
        if index % 10 == 0:
            data = np.concatenate(buffer, axis=0)
            data -= np.mean(data, axis=0)
            data /= np.std(data, axis=0)
            kmeans.partial_fit(data)
            buffer = []
        if index % 100 == 0:
            print('Partial fit of %4i out of %i'
                  % (index, 6 * len(ds.data)))

dt = time.time() - t0
print('done in %.2fs.' % dt)

plt.figure(figsize=(4.2, 4))
for i, patch in enumerate(kmeans.cluster_centers_):
    plt.subplot(9, 9, i + 1)
    plt.imshow(patch.reshape(patch_size), cmap=plt.cm.gray,
               interpolation='nearest')
    plt.xticks(())
    plt.yticks(())


plt.suptitle('Patches of faces\nTrain time %.1fs on %d patches' %
             (dt, 8 * len(ds.data)), fontsize=16)
plt.subplots_adjust(0.08, 0.02, 0.92, 0.85, 0.08, 0.23)

plt.show()

class faceCluster():
    pass